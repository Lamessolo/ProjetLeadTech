try{window.performance.mark("async-resource-nextgen-backlog.js:eval-start")}catch(e){}(window.webpackJsonp=window.webpackJsonp||[]).push([["async-resource-nextgen-backlog"],{"./node_modules/lodash/isError.js":function(e,r,s){var t=s("./node_modules/lodash/_baseGetTag.js"),a=s("./node_modules/lodash/isObjectLike.js"),n=s("./node_modules/lodash/isPlainObject.js");e.exports=function(e){if(!a(e))return!1;var r=t(e);return"[object Error]"==r||"[object DOMException]"==r||"string"==typeof e.message&&"string"==typeof e.name&&!n(e)}},"./src/packages/platform/services/spa-apdex-analytics/src/marks.js":function(e,r,s){"use strict";s.d(r,"a",(function(){return a})),s.d(r,"b",(function(){return n})),s.d(r,"c",(function(){return o}));var t=s("./src/packages/platform/services/spa-apdex-analytics/src/transform.js");const a=Object(t.b)("appBundleReady"),n=Object(t.b)("prefetchApiReady"),o=Object(t.b)("prefetchApiStart");Object(t.b)("issueViewInitialDataReady")},
"./src/packages/platform/services/spa-apdex-analytics/src/transform.js":function(e,r,s){"use strict";s.d(r,"b",(function(){return t})),s.d(r,"a",(function(){return a}));const t=e=>`jira.fe.spa-${e}`,a=e=>e.substring("jira.fe.spa-".length)},"./src/packages/platform/utils/fetch/src/utils/as-json-stream.js":function(e,r,s){"use strict";var t=s("./node_modules/icepick/icepick.js"),a=s("./node_modules/rxjs/Observable.js"),n=(s("./node_modules/rxjs/add/observable/of.js"),s("./node_modules/rxjs/add/operator/mergeMap.js"),s("./node_modules/rxjs/add/operator/catch.js"),s("./src/packages/platform/utils/constants/src/fetch-default-options.js")),o=s("./src/packages/common-legacy-do-not-add-anything-new/src/performance/index.js"),c=s("./src/packages/platform/utils/fetch/src/utils/capability-header.js"),i=s("./src/packages/platform/utils/fetch/src/utils/errors.js");function u(e,r){if(null==e)return{};var s,t,a=function(e,r){if(null==e)return{};var s,t,a={},n=Object.keys(e)
;for(t=0;t<n.length;t++)s=n[t],r.indexOf(s)>=0||(a[s]=e[s]);return a}(e,r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(t=0;t<n.length;t++)s=n[t],r.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(a[s]=e[s])}return a}r.a=(e,r={})=>{const{perf:s,headersProcessor:d}=r,l=u(r,["perf","headersProcessor"]);let g;const p=!!s;if(p){const r=`REST${(e=>{const r=e.replace(/\//g,"_");return r.substr(0,r.indexOf("?")>-1?r.indexOf("?"):r.length)})(e)}`;g=s&&`${null!=s.prefix&&""!==s.prefix?`${s.prefix}_`:""}${s.key}`||r,Object(o.setMark)(`BEGIN_${g}`)}return a.Observable.of(e).mergeMap((()=>fetch(e,Object(t.merge)(Object(t.merge)(n.a,l),Object(c.b)())))).mergeMap((e=>{if(p&&Object(o.setMark)(`END_${g}`),!e.ok){const{status:r}=e;return e.text().then((s=>{const t=e.headers.get("atl-traceid");throw null!=t&&""!==t?new i.b(r,s,t):new i.b(r,s)}))}return"function"==typeof d&&d(e.headers),204===e.status?a.Observable.of(null):e.json()}))}},
"./src/packages/routes/src/common/ui/resources/utils/create-resource-error/index.js":function(e,r,s){"use strict";s.d(r,"a",(function(){return n}));var t=s("./src/packages/common-legacy-do-not-add-anything-new/src/util/logging/log.js");function a({name:e,message:r,component:s},a){this.name=e,this.message=r,a&&(this.name=a.name?a.name:e,this.message=a.message?a.message:r,a.stack&&(this.stack=a.stack)),t.a.safeErrorWithoutCustomerData(s,r,a)}a.prototype=Object.create(Error.prototype),a.prototype.constructor=a;const n=({name:e="UnknownError",message:r="",component:s=""},n)=>n?(t.a.safeErrorWithoutCustomerData(s,r,n),n):new a({name:e,message:r,component:s},n)},"./src/packages/routes/src/ui/spa/next-gen/resources/backlog/get-data/index.js":function(e,r,s){"use strict";s.r(r)
;var t=s("./src/packages/common-legacy-do-not-add-anything-new/src/performance/index.js"),a=s("./src/packages/platform/services/spa-apdex-analytics/src/marks.js"),n=s("./src/packages/software/backlog/src/rest/load-agility-graphql-data/index.js"),o=s("./src/packages/routes/src/common/ui/resources/utils/create-resource-error/index.js");r.default=async({match:e},{tenantContext:r})=>{const{baseUrl:s}=r,c=e.params.boardId||"";try{return Object(t.setMark)(a.c),await Object(n.a)(s,c).toPromise().then((e=>(Object(t.setMark)(a.b),e)))}catch(i){throw Object(o.a)({component:"spa.view.routes.next-gen.backlog.getData",message:"An error was thrown while prefetching backlog data",name:"ResourceError"},i)}}},"./src/packages/software/backlog/src/rest/load-agility-graphql-data/index.js":function(e,r,s){"use strict"
;var t=s("./node_modules/rxjs/Rx.js"),a=s("./src/packages/common-legacy-do-not-add-anything-new/src/util/index.js"),n=s("./src/packages/software/resource-invalidator/src/controllers/resources-cache-update-subject/index.js"),o=s("./src/packages/software/swag/src/services/query/index.js");const c="BacklogDataQuery";r.a=(e,r)=>{const s=(new Date).valueOf()
;return Object(o.a)(e,c,(()=>"\n    query BacklogDataQuery ($boardId: ID!) {\n        boardScope(boardId: $boardId) {\n            sprints(state:[ACTIVE, FUTURE]) {\n                id\n                name\n                goal\n                startDate\n                endDate\n                daysRemaining\n                cards {\n                    id\n                    issue {\n                        id\n                        key\n                        summary\n                        labels\n                        type {\n                            id\n                            name\n                            iconUrl\n                        }\n                        status {\n                            id\n                            name\n                            category\n                        }\n                        assignee {\n                            accountId\n                            displayName\n                            avatarUrl\n                        }\n                    }\n                    flagged\n                    done\n                    parentId\n                    estimate {\n                        storyPoints\n                    }\n                    priority {\n                        name\n                        iconUrl\n                    }\n                    dueDate\n                    childIssuesMetadata { complete, total }\n                    fixVersions\n                }\n                sprintState\n            }\n            backlog {\n                boardIssueListKey\n                cards {\n                    id\n                    issue {\n                        id\n                        key\n                        summary\n                        labels\n                        type {\n                            id\n                            name\n                            iconUrl\n                        }\n                        status {\n                            id\n                            name\n                            category\n                        }\n                        assignee {\n                            accountId\n                            displayName\n                            avatarUrl\n                        }\n                    }\n                    flagged\n                    done\n                    parentId\n                    estimate {\n                        storyPoints\n                    }\n                    priority {\n                        name\n                        iconUrl\n                    }\n                    dueDate\n                    childIssuesMetadata { complete, total }\n                    fixVersions\n                }\n            }\n            board {\n                cards {\n                    id\n                    issue {\n                        id\n                        key\n                        summary\n                        labels\n                        type {\n                            id\n                            name\n                            iconUrl\n                        }\n                        status {\n                            id\n                            name\n                            category\n                        }\n                        assignee {\n                            accountId\n                            displayName\n                            avatarUrl\n                        }\n                    }\n                    flagged\n                    done\n                    parentId\n                    estimate {\n                        storyPoints\n                    }\n                    priority {\n                        name\n                        iconUrl\n                    }\n                    dueDate\n                    childIssuesMetadata { complete, total }\n                    fixVersions\n                }\n                rankCustomFieldId\n                issueParents {\n                    id\n                    key\n                    summary\n                    issueType {\n                        id\n                        name\n                        iconUrl\n                    }\n                    color\n                }\n            }\n            currentUser {\n                permissions\n            }\n            projectLocation {\n                id\n                key\n                name\n            }\n            features {\n                key\n                status\n            }\n        }\n    }\n")(),{
boardId:r}).flatMap((e=>{const r=(new Date).valueOf();return a.h.safeInfoWithoutCustomerData("rest.swag.BacklogDataQuery.success","",{time:r-s}),n.a.next({origin:"BACKLOG",payload:e.boardScope}),t.Observable.of(e.boardScope)}))}},"./src/packages/software/resource-invalidator/src/controllers/resources-cache-update-subject/index.js":function(e,r,s){"use strict";var t=s("./node_modules/rxjs/Rx.js");r.a=new t.Subject},"./src/packages/software/swag/src/common/utils/error/index.js":function(e,r,s){"use strict";s.d(r,"a",(function(){return t}));class t extends Error{constructor({graphQLErrors:e,networkError:r,errorMessage:s,traceId:t=""}){super(s),this.graphQLErrors=[],this.networkError=null,this.traceId="",this.graphQLErrors=e||[],this.networkError=r||null,this.message=s||(e=>{let r="";return Array.isArray(e.graphQLErrors)&&0!==e.graphQLErrors.length&&e.graphQLErrors.forEach((e=>{const s=e?e.message:"Error message not found.";r+=`GraphQL error: ${s}\n`})),
e.networkError&&(r+=`Network error: ${e.networkError.message}\n`),r=r.replace(/\n$/,""),r})(this),this.name=this.constructor.name,this.traceId=t,"function"==typeof Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error(this.message).stack}}},"./src/packages/software/swag/src/services/log-error/index.js":function(e,r,s){"use strict";s.d(r,"a",(function(){return o})),s.d(r,"b",(function(){return c})),s.d(r,"d",(function(){return i})),s.d(r,"e",(function(){return u})),s.d(r,"f",(function(){return d})),s.d(r,"g",(function(){return l})),s.d(r,"c",(function(){return g}));var t=s("./src/packages/common-legacy-do-not-add-anything-new/src/util/index.js");const a=(e,r,s)=>{const{message:a,path:n,queryName:o,statusCode:c,errorType:i,errorName:u}=s,d={message:a||"",path:JSON.stringify(n||[]),statusCode:String(c||"[unknown]"),queryName:o,errorType:i?String(i):"",errorName:u?String(u):""};return t.h.safeErrorWithoutCustomerData(e,r,d)
},n="[errors in SWAG response]",o=(e,r,s,t)=>a("apollo.swag.error.graphql","[GraphQL error]",{message:n,path:e,statusCode:r,queryName:s,errorType:t}),c=(e,r,s)=>{a("apollo.swag.error.network","[Network error]",{message:`[Network error]: ${e}`,statusCode:r,queryName:s})},i=(e,r,s,t)=>{a("rest.swag.error.graphql","[GraphQL error]",{message:n,path:e,statusCode:r,queryName:s,errorType:t})},u=(e,r,s,t)=>{a("rest.swag.error.network","[Network error]",{message:`[Network error]: ${e}`,statusCode:r,queryName:s,errorName:t})},d=(e,r)=>{a("rest.swag.error.parsing","[Parsing error]",{message:`[Parsing error]: ${e}`,queryName:r})},l=({queryName:e,statusCode:r,isRetrySuccessful:s,retryStatusCode:a})=>t.h.safeErrorWithoutCustomerData("rest.swag.retry","[Retry]",{queryName:e,statusCode:r||"",isRetrySuccessful:String(s),retryStatusCode:a||""}),g=({queryName:e,statusCode:r})=>t.h.safeErrorWithoutCustomerData("apollo.swag.retry","[Retry]",{queryName:e,statusCode:r})},
"./src/packages/software/swag/src/services/operation/index.js":function(e,r,s){"use strict";s.d(r,"a",(function(){return v}));var t=s("./node_modules/rxjs/Rx.js"),a=s("./node_modules/lodash/get.js"),n=s.n(a),o=s("./node_modules/lodash/isError.js"),c=s.n(o),i=s("./node_modules/js-cookie/src/js.cookie.js"),u=s.n(i),d=s("./node_modules/uuid/index.js"),l=s.n(d),g=s("./src/packages/platform/observability/browser-metrics/src/index.js"),p=s("./src/packages/common-legacy-do-not-add-anything-new/src/util/logging/log.js"),m=s("./src/packages/platform/utils/fetch/src/utils/as-json-stream.js"),f=s("./src/packages/platform/observability/product-analytics-web-client/src/async.js"),y=s("./src/packages/software/swag/src/common/utils/error/index.js"),b=s("./src/packages/common-legacy-do-not-add-anything-new/src/util/get-feature-flag-value.js");var h=s("./src/packages/software/swag/src/services/log-error/index.js");const j=".time",k=(e,r)=>{Object(f.a)().then((s=>{const t=s.getInstance();if(!t)return
;let a="unknown";if(null!==r){const e=String(r);"0"===e||"429"===e?a=e:e.match(/^[12345][0-9]{2}$/)&&(a=`${e[0]}xx`)}t.sendOperationalEvent({action:"fetch",actionSubject:"swag operation",attributes:{key:e,statusCode:r,statusCodeFamily:a},source:"swagOperation"})}))},w=(e,r,s,t)=>{if(void 0!==e&&(k(e,s),void 0!==r)){const r=!0;Object(g.c)().cancel({key:e+j,concurrentId:t},r)}},x=({baseUrl:e,operationName:r,query:s,variables:t,action:a,headersProcessor:n})=>{let o={};const c=u.a.get("atlassian.xsrf.token");return"mutation"===a&&(c||p.a.safeErrorWithoutCustomerData("board.xsrf-token.load.failure","XSRF Token failed to load"),o={"atl-xsrf-token":c}),Object(m.a)((()=>Object(b.b)("jsw.perf.jfe-swag-tenant-based-routing",!1))()?`${e}/jsw2/graphql?operation=${r}`:`${e}/jsw/graphql?operation=${r}`,{method:"POST",body:JSON.stringify({operationName:r,query:s,variables:t}),headers:o,headersProcessor:n})},v=(e,r,s,a,o,i)=>{const{analyticKey:u,slo:d}=i||{};let p="";const m=e=>{
p=e.get("atl-traceid")||""},f=Object(g.c)(),v=l.a.v4();return t.Observable.defer((()=>(void 0!==u&&void 0!==d&&f.markStartOfInteraction({key:u+j,concurrentId:v}),x({baseUrl:r,operationName:s,query:a,variables:o,action:e,headersProcessor:m})))).catch((c=>{const i=n()(c,["statusCode"],null);return[502,503,504].includes(Number(i))&&"query"===e?x({baseUrl:r,operationName:s,query:a,variables:o,action:e,headersProcessor:m}).do((()=>{Object(h.g)({queryName:s,statusCode:i,isRetrySuccessful:!0,retryStatusCode:null})}),(e=>{const r=n()(e,["statusCode"],null);Object(h.g)({queryName:s,statusCode:i,isRetrySuccessful:!1,retryStatusCode:r})})):t.Observable.throw(c)})).catch((e=>{const r=c()(e)?e.message:`[unknown error] = ${JSON.stringify(e)}`,a=n()(e,["statusCode"],null),o=n()(e,["name"],null);return Object(h.e)(r,a,s,o),w(u,d,a,v),t.Observable.throw(new y.a({networkError:e,traceId:p}))})).flatMap((e=>{e&&e.data||Object(h.f)("empty response.data",s);try{if(e.errors){const r=e.errors.map((e=>{
const{path:r,message:t}=e,a=n()(e,["extensions","statusCode"],null),o=n()(e,["extensions","errorType"],void 0),c=n()(e,["extensions","userMessage"],void 0);return Object(h.d)(r,a,s,o),w(u,d,a,v),{message:t,path:r,extensions:{statusCode:a?Number(a):null,errorType:o,userMessage:c}}}));return t.Observable.throw(new y.a({graphQLErrors:r,traceId:p}))}}catch(r){const e=c()(r)?r.message:`[unknown error] = ${JSON.stringify(r)}`;throw Object(h.f)(e,s),w(u,d,"unknown",v),r}if(void 0!==u){let r;if((()=>Object(b.a)("jsw.roadmaps.nested-data-error-check",!1))()){const s=Object.values(e.data);1===s.length&&(r=n()(s[0],["statusCode"],null))}k(u,r||e.statusCode||"200"),void 0!==d&&f.markTimeToFinishTask({key:u+j,concurrentId:v,sloSuccessThreshold:d})}return t.Observable.of(e.data)}))}},"./src/packages/software/swag/src/services/query/index.js":function(e,r,s){"use strict";s.d(r,"a",(function(){return a}));var t=s("./src/packages/software/swag/src/services/operation/index.js")
;const a=(e,r,s,a,n)=>Object(t.a)("query",e,r,s,a,n)}}]);try{window.__jsEvalStop("async-resource-nextgen-backlog.js")}catch(e){}
//# sourceMappingURL=https://statlas.prod.atl-paas.net/jira-frontend-source-maps/assets/async-resource-nextgen-backlog.4ce012988ce0fb48d119.8.js.map