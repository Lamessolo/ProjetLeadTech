 *Assurer l'implémentation de SPECIFICATION FONCTIONNELLE requises dans l'architecture

La spécification fonctionnelle est la description des fonctions d'un logiciel en vue de sa réalisation. 
La spécification fonctionnelle décrit dans le détail la façon dont les exigences seront prises en compte
(les exigences sont l'expression d'un besoin documenté sur ce qu'un produit devrait être.)
Les spécifications fonctionnelles générales (SFG), qui décrivent le modèle métier, élaborées par la maîtrise d'ouvrage,
Les spécifications fonctionnelles détaillées (SFD), qui sont élaborées par la maîtrise d'œuvre.

* Implémenter des STRATEGIE DE MITIGATION de risques associés à l'architecture:
La mitigation est la mise en œuvre de mesures destinées à réduire les dommages associés à des risques naturels ou générés par les activités humaines
des méthodes d’analyse des risques SSI (EBIOS, MEHARI)
EBIOS fournit quatre options de traitement

REDUCTION. Il s’agit de mettre en place les mesures pour diminuer la vraisemblance et l'impact du risque à un niveau acceptable ;
PARTAGE. Ici, on envisage de faire porter le risque ou de le transférer à un tiers (comme un assureur, par exemple) ;
REFUS. On modifie les applications ou le SI, pour que le risque ne pèse plus ;
MAINTIEN. On accepte d’assumer le risque sans prendre d’initiatives particulières.

Vous complétez cette vision avec un court paragraphe dans la PSSI qui aborde "la stratégie globale de mitigation des risques"
Une méthode d’analyse de risque permet d’établir un tableau récapitulatif des risques, de décrire leur vraisemblance et leur gravité ;

Une stratégie globale de risque est spécifiée dans la PPSI, ainsi qu’un traitement (évitement, partage, refus et maintien) pour chaque risque spécifique.

 
 *Implémenter un référentiel de gouvernance d'architecture


Les accès par défaut  pour des ressources protégées doivent être interdits. Ils ne doivent être autorisés que si le demandeur possède explicitement les droits ;

Il est recommandé de réaliser le contrôle d’accès sur le serveur ;

Il peut être utile d’implémenter un accès limité à quelques requêtes sur la base d’une fréquence raisonnable. Par exemple, le nombre de requêtes HTTP sur une ressource peut être limité ou bien l’accès des requêtes sur la couche de la base de données pour empêcher les téléchargements abusifs. À ce titre, Google a limité l’accès à l’API Google Maps à 10 000 requêtes par jour et par utilisateur ;

Il convient d’utiliser un mécanisme de contrôle d’accès centralisé. Si les décisions d’accès sont réalisées séparément dans chaque composant, des mises à jour pourraient ne pas être propagées dans l’ensemble de l’application ;

Il peut être intéressant de tracer toutes les décisions d’accès dans des journaux (ou logs) afin de pouvoir les étudier plus facilement.

/******************************Sécurité de base de données*************************************************/

Tout d’abord, les chaînes de connexion aux BDD ne devraient pas être écrites en dur dans l’application, mais au contraire stockées dans un fichier de configuration distinct sur un système de confiance et devraient être chiffrées. Sur le plan des accès, il faut aussi garder en tête la règle de couper la connexion dès que possible.
 Désactiver toutes les fonctionnalités de la BDD qui ne sont pas strictement nécessaires

Une dernière piste de sécurisation consiste à historiser les transactions réalisées sur vos bases de données, afin de savoir quelles informations ont été traitées, quand, comment et par quel acteur

La journalisation consiste à historiser les événements survenus dans une application. Pour une utilisation optimale et sécurisée, quelques recommandations sont disponibles.

 "node-modules/jquery/dist/jquery.min.js",
              "node-modules/bootstrap/dist/css/js/bootstrap.min.js"

 "node-modules/bootstrap/dist/css/bootstrap.min.css",
              "node-modules/font-awesome/css/font-awesome.min.css"